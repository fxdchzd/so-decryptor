package symetricks.sodecryptor;

import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.win32.StdCallLibrary;
public interface Wincrypt extends StdCallLibrary {
    Wincrypt INSTANCE = Native.load("Advapi32", Wincrypt.class);

    final static int CRYPT_VERIFYCONTEXT = 0xF0000000;
    final static int CRYPT_NEWKEYSET = 0x00000008;
    final static int CRYPT_DELETEKEYSET = 0x00000010;
    final static int CRYPT_MACHINE_KEYSET = 0x00000020;
    final static int CRYPT_SILENT = 0x00000040;
    final static int PROV_RSA_FULL = 1;
    final static int PROV_RSA_SIG = 2;
    final static int PROV_DSS = 3;
    final static int PROV_FORTEZZA = 4;
    final static int PROV_MS_EXCHANGE = 5;
    final static int PROV_SSL = 6;
    final static int PROV_RSA_SCHANNEL = 12;
    final static int PROV_DSS_DH = 13;
    final static int PROV_EC_ECDSA_SIG = 14;
    final static int PROV_EC_ECNRA_SIG = 15;
    final static int PROV_EC_ECDSA_FULL = 16;
    final static int PROV_EC_ECNRA_FULL = 17;
    final static int PROV_DH_SCHANNEL = 18;
    final static int PROV_SPYRUS_LYNKS = 20;
    final static int PROV_RNG = 21;
    final static int PROV_INTEL_SEC = 22;
    final static int PROV_REPLACE_OWF = 23;
    final static int PROV_RSA_AES = 24;
    final static int KP_IV = 1;
    final static int KP_SALT = 2;
    final static int KP_PADDING = 3;
    final static int KP_MODE = 4;
    final static int KP_MODE_BITS = 5;
    final static int KP_PERMISSIONS = 6;
    final static int KP_ALGID = 7;
    final static int KP_BLOCKLEN = 8;
    final static int KP_KEYLEN = 9;
    final static int KP_SALT_EX = 10;
    final static int KP_P = 11;
    final static int KP_G = 12;
    final static int KP_Q = 13;
    final static int KP_X = 14;
    final static int KP_Y = 15;
    final static int KP_RA = 16;
    final static int KP_RB = 17;
    final static int KP_INFO = 18;
    final static int KP_EFFECTIVE_KEYLEN = 19;
    final static int KP_SCHANNEL_ALG = 20;
    final static int KP_CLIENT_RANDOM = 21;
    final static int KP_SERVER_RANDOM = 22;
    final static int KP_RP = 23;
    final static int KP_PRECOMP_MD5 = 24;
    final static int KP_PRECOMP_SHA = 25;
    final static int KP_CERTIFICATE = 26;
    final static int KP_CLEAR_KEY = 27;
    final static int KP_PUB_EX_LEN = 28;
    final static int KP_PUB_EX_VAL = 29;
    final static int KP_KEYVAL = 30;
    final static int KP_ADMIN_PIN = 31;
    final static int KP_KEYEXCHANGE_PIN = 32;
    final static int KP_SIGNATURE_PIN = 33;
    final static int KP_PREHASH = 34;
    final static int KP_ROUNDS = 35;
    final static int KP_OAEP_PARAMS = 36;
    final static int KP_CMS_KEY_INFO = 37;
    final static int KP_CMS_DH_KEY_INFO = 38;
    final static int KP_PUB_PARAMS = 39;
    final static int KP_VERIFY_PARAMS = 40;
    final static int KP_HIGHEST_VERSION = 41;
    final static int KP_GET_USE_COUNT = 42;
    final static int KP_PIN_ID = 43;
    final static int KP_PIN_INFO = 44;
    final static String MS_ENH_RSA_AES_PROV_A = "Microsoft Enhanced RSA and AES Cryptographic Provider";
    final static String MS_ENH_RSA_AES_PROV_W = "Microsoft Enhanced RSA and AES Cryptographic Provider";
    final static String MS_ENH_RSA_AES_PROV_XP_A = "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)";
    final static String MS_ENH_RSA_AES_PROV_XP_W = "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)";

    boolean CryptAcquireContextA(PointerByReference phProv, String pszContainer, String pszProvider, int dwProvType, int dwFlags);
    boolean CryptImportKey(Pointer hProv, byte[] pbData, int dwDataLen, long hPubKey, int dwFlags, PointerByReference phKey);
    boolean CryptSetKeyParam(Pointer hKey, int dwParam, byte[] pbData, int dwFlags);

    boolean CryptDecrypt(Pointer hKey,int hHash,boolean finalFlag,int dwFlags,byte[] pbData,int[] pdwDataLen);
    boolean CryptDestroyKey(Pointer hKey);
    boolean CryptReleaseContext(Pointer hProv, int dwFlags);
}
